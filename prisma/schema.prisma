// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserType {
    ROOT_ADMIN
    SUPER_ADMIN
    ADMIN
    END_USER
    SERVICE_PROVIDER
}

enum Badge {
    FLYING
    REGISTERED
    VERIFIED
}

enum SIGNUP_METHOD {
    MOBILE
    EMAIL
    OTHER
}

enum GENDER {
    MEN
    WOMEN
    OTHER
}

enum PARTS_STATUS {
    ACTIVE
    INACTIVE
}

model Users {
    id              Int            @id @default(autoincrement())
    uuid            String         @unique @default(uuid()) @db.Uuid
    email           String?        @unique
    mobile          String?        @unique
    user_id         String?
    password        String?
    user_type       UserType
    badge           Badge?
    is_verified     Boolean        @default(false)
    is_registered   Boolean        @default(false)
    email_verified  Boolean        @default(false)
    mobile_verified Boolean        @default(false)
    signup_method   SIGNUP_METHOD?
    profile         Profile?
    role            Roles?         @relation(fields: [roleUuid], references: [uuid])
    roleUuid        String?        @db.Uuid
}

model Profile {
    uuid       String    @unique @default(uuid()) @db.Uuid
    first_name String?   @db.VarChar(100)
    last_name  String?   @db.VarChar(100)
    address    String?   @db.VarChar(255)
    gender     GENDER?
    dob        DateTime?
    image      String?
    user       Users     @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
    userUuid   String    @unique @db.Uuid
}

model Roles {
    id          Int           @id @unique @default(autoincrement())
    uuid        String        @unique @default(uuid()) @db.Uuid
    name        String        @unique @db.VarChar(100)
    slug        String        @unique @db.VarChar(100)
    description String?       @db.VarChar(100)
    system_role Boolean       @default(false)
    soft_delete Boolean       @default(false)
    created_at  DateTime      @default(now()) @db.Timestamptz(6)
    created_by  String?       @db.Uuid
    updated_at  DateTime?     @updatedAt @db.Timestamptz(6)
    updated_by  String?       @db.Uuid
    users       Users[]
    permissions Permissions[]
}

model Permissions {
    id          Int       @id @unique @default(autoincrement())
    uuid        String    @unique @default(uuid()) @db.Uuid
    name        String    @unique @db.VarChar(100)
    slug        String    @unique @db.VarChar(100)
    description String?   @db.VarChar(250)
    group       String?   @db.VarChar
    soft_delete Boolean   @default(false)
    created_at  DateTime  @default(now()) @db.Timestamptz(6)
    created_by  String?   @db.Uuid
    updated_at  DateTime? @updatedAt @db.Timestamptz(6)
    updated_by  String?   @db.Uuid
    roles       Roles[]
}

model PartsCategory {
    id                   Int                    @id @unique @default(autoincrement())
    uuid                 String                 @unique @default(uuid()) @db.Uuid
    name                 String                 @unique @db.VarChar(100)
    image                String?                @db.VarChar()
    soft_delete          Boolean                @default(false)
    created_at           DateTime               @default(now()) @db.Timestamptz(6)
    created_by           String?                @db.Uuid
    updated_at           DateTime?              @updatedAt @db.Timestamptz(6)
    updated_by           String?                @db.Uuid
    parts                Parts[]
    partsCategoryOptions PartsCategoryOptions[]
}

model PartsCategoryOptions {
    id                         Int                          @id @unique @default(autoincrement())
    uuid                       String                       @unique @default(uuid()) @db.Uuid
    name                       String                       @unique @db.VarChar(100)
    created_at                 DateTime                     @default(now()) @db.Timestamptz(6)
    created_by                 String?                      @db.Uuid
    updated_at                 DateTime?                    @updatedAt @db.Timestamptz(6)
    updated_by                 String?                      @db.Uuid
    partsCategory              PartsCategory?               @relation(fields: [partsCategoryUuid], references: [uuid])
    partsCategoryUuid          String                       @db.Uuid
    partsCategoryOptionsEntity PartsCategoryOptionsEntity[]
}

model PartsCategoryOptionsEntity {
    id                       Int                   @id @unique @default(autoincrement())
    uuid                     String                @unique @default(uuid()) @db.Uuid
    name                     String                @unique @db.VarChar(100)
    created_at               DateTime              @default(now()) @db.Timestamptz(6)
    created_by               String?               @db.Uuid
    updated_at               DateTime?             @updatedAt @db.Timestamptz(6)
    updated_by               String?               @db.Uuid
    parts                    Parts[]
    partsCategoryOptions     PartsCategoryOptions? @relation(fields: [partsCategoryOptionsUuid], references: [uuid])
    partsCategoryOptionsUuid String?               @db.Uuid
}

model Brands {
    id          Int       @id @unique @default(autoincrement())
    uuid        String    @unique @default(uuid()) @db.Uuid
    name        String    @unique @db.VarChar(100)
    image       String?   @db.VarChar()
    soft_delete Boolean   @default(false)
    description String?   @db.VarChar()
    created_at  DateTime  @default(now()) @db.Timestamptz(6)
    created_by  String?   @db.Uuid
    updated_at  DateTime? @updatedAt @db.Timestamptz(6)
    updated_by  String?   @db.Uuid
    parts       Parts[]
}

model Models {
    id          Int       @id @unique @default(autoincrement())
    uuid        String    @unique @default(uuid()) @db.Uuid
    name        String    @unique @db.VarChar(100)
    soft_delete Boolean   @default(false)
    description String?   @db.VarChar()
    created_at  DateTime  @default(now()) @db.Timestamptz(6)
    created_by  String?   @db.Uuid
    updated_at  DateTime? @updatedAt @db.Timestamptz(6)
    updated_by  String?   @db.Uuid
    parts       Parts[]
}

model Years {
    id          Int       @id @unique @default(autoincrement())
    uuid        String    @unique @default(uuid()) @db.Uuid
    year        String    @db.VarChar()
    soft_delete Boolean   @default(false)
    created_at  DateTime  @default(now()) @db.Timestamptz(6)
    created_by  String?   @db.Uuid
    updated_at  DateTime? @updatedAt @db.Timestamptz(6)
    updated_by  String?   @db.Uuid
    parts       Parts[]
}

model Engines {
    id          Int       @id @unique @default(autoincrement())
    uuid        String    @unique @default(uuid()) @db.Uuid
    name        String    @db.VarChar()
    image       String?   @db.VarChar()
    soft_delete Boolean   @default(false)
    description String?   @db.VarChar()
    created_at  DateTime  @default(now()) @db.Timestamptz(6)
    created_by  String?   @db.Uuid
    updated_at  DateTime? @updatedAt @db.Timestamptz(6)
    updated_by  String?   @db.Uuid
    parts       Parts[]
}

model VehicleTypes {
    id          Int       @id @unique @default(autoincrement())
    uuid        String    @unique @default(uuid()) @db.Uuid
    name        String    @db.VarChar()
    image       String?   @db.VarChar()
    soft_delete Boolean   @default(false)
    description String?   @db.VarChar()
    created_at  DateTime  @default(now()) @db.Timestamptz(6)
    created_by  String?   @db.Uuid
    updated_at  DateTime? @updatedAt @db.Timestamptz(6)
    updated_by  String?   @db.Uuid
    parts       Parts[]
}

model Parts {
    id                           Int                          @id @unique @default(autoincrement())
    uuid                         String                       @unique @default(uuid()) @db.Uuid
    name                         String                       @db.VarChar()
    price                        Float                        @db.DoublePrecision
    qty                          Int?                         @default(0) @db.Integer
    status                       PARTS_STATUS?
    alert_qty                    Int                          @db.Integer
    soft_delete                  Boolean                      @default(false)
    description                  String?                      @db.VarChar()
    created_at                   DateTime                     @default(now()) @db.Timestamptz(6)
    created_by                   String?                      @db.Uuid
    updated_at                   DateTime?                    @updatedAt @db.Timestamptz(6)
    updated_by                   String?                      @db.Uuid
    categoryUuid                 String                       @db.Uuid
    category                     PartsCategory?               @relation(fields: [categoryUuid], references: [uuid])
    brandUuid                    String?                      @db.Uuid
    brands                       Brands?                      @relation(fields: [brandUuid], references: [uuid])
    models                       Models[]
    engines                      Engines[]
    years                        Years[]
    vehicleTypes                 VehicleTypes[]
    partsEntryLists              PartsEntryLists[]
    partsInvoiceProducts         PartsInvoiceProducts[]
    partsCategoryOptionsEntities PartsCategoryOptionsEntity[]
}

model Vendors {
    id           Int            @id @unique @default(autoincrement())
    uuid         String         @unique @default(uuid()) @db.Uuid
    name         String         @db.VarChar()
    address      String         @db.VarChar()
    mobile       String         @db.VarChar()
    email        String?        @db.VarChar()
    documents    String?        @db.VarChar()
    soft_delete  Boolean        @default(false)
    description  String?        @db.VarChar()
    created_at   DateTime       @default(now()) @db.Timestamptz(6)
    created_by   String?        @db.Uuid
    updated_at   DateTime?      @updatedAt @db.Timestamptz(6)
    updated_by   String?        @db.Uuid
    partsEntries PartsEntries[]
}

// Vendot Product entries information
model PartsEntries {
    id              Int               @id @unique @default(autoincrement())
    uuid            String            @unique @default(uuid()) @db.Uuid
    cash_momo_no    String?           @db.VarChar()
    amount          Float?            @db.DoublePrecision
    supply_date     DateTime?         @db.Timestamptz(6)
    documents       String?           @db.VarChar()
    description     String?           @db.VarChar()
    soft_delete     Boolean           @default(false)
    created_at      DateTime          @default(now()) @db.Timestamptz(6)
    created_by      String?           @db.Uuid
    updated_at      DateTime?         @updatedAt @db.Timestamptz(6)
    updated_by      String?           @db.Uuid
    Vendors         Vendors?          @relation(fields: [vendorUuid], references: [uuid])
    vendorUuid      String?           @db.Uuid
    partsEntryLists PartsEntryLists[]
}

model PartsEntryLists {
    id               Int           @id @unique @default(autoincrement())
    uuid             String        @unique @default(uuid()) @db.Uuid
    qty              Int           @db.Integer
    indPrice         Float         @db.DoublePrecision
    amount           Float         @db.DoublePrecision
    parts            Parts?        @relation(fields: [partsUuid], references: [uuid])
    partsUuid        String?       @db.Uuid
    partsEntries     PartsEntries? @relation(fields: [partsEntriesUuid], references: [uuid])
    partsEntriesUuid String?       @db.Uuid
}

model PartsInvoices {
    id                   Int                    @id @unique @default(autoincrement())
    uuid                 String                 @unique @default(uuid()) @db.Uuid
    invoice_no           String                 @unique @default(uuid()) @db.Uuid // #IVSL5498534
    user_name            String                 @db.VarChar()
    user_mobile          String                 @db.VarChar()
    user_email           String?                @db.VarChar()
    address              String?                @db.VarChar()
    amount               Float                  @db.DoublePrecision
    soft_delete          Boolean                @default(false)
    created_at           DateTime               @default(now()) @db.Timestamptz(6)
    created_by           String?                @db.Uuid
    partsInvoiceProducts PartsInvoiceProducts[]
}

model PartsInvoiceProducts {
    id               Int            @id @unique @default(autoincrement())
    uuid             String         @unique @default(uuid()) @db.Uuid
    qty              Int            @db.Integer
    unit_price       Float          @db.DoublePrecision
    price            Float          @db.DoublePrecision
    partsUuid        String         @db.Uuid
    parts            Parts?         @relation(fields: [partsUuid], references: [uuid])
    partsInvoices    PartsInvoices? @relation(fields: [partsInvoiceUuid], references: [uuid])
    partsInvoiceUuid String         @db.Uuid
    soft_delete      Boolean        @default(false)
    created_at       DateTime       @default(now()) @db.Timestamptz(6)
    created_by       String?        @db.Uuid
}
